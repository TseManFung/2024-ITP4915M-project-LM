<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="_error" xml:space="preserve">
    <value>error</value>
  </data>
  <data name="_Order" xml:space="preserve">
    <value>Order</value>
  </data>
  <data name="Are_you_sure_you_want_to_chang" xml:space="preserve">
    <value>Are you sure you want to change your password?</value>
  </data>
  <data name="Are_you_sure_you_want_to_remov" xml:space="preserve">
    <value>Are you sure you want to remove all items from your cart?</value>
  </data>
  <data name="can_not_get_price" xml:space="preserve">
    <value>can not get price</value>
  </data>
  <data name="can_not_get_stock" xml:space="preserve">
    <value>can not get stock</value>
  </data>
  <data name="dealer_must_have_a_saleArea" xml:space="preserve">
    <value>dealer must have a saleArea!</value>
  </data>
  <data name="DealerID" xml:space="preserve">
    <value>DealerID</value>
  </data>
  <data name="Department_ID_already_exists_P" xml:space="preserve">
    <value>Department ID already exists. Please choose a different ID.</value>
  </data>
  <data name="Department_ID_cannot_exceed_5_" xml:space="preserve">
    <value>Department ID cannot exceed 5 characters. Please re-enter.</value>
  </data>
  <data name="Do_you_want_to_change_the_data" xml:space="preserve">
    <value>Do you want to change the data?</value>
  </data>
  <data name="Do_you_want_to_turn_to_the_nex" xml:space="preserve">
    <value>Do you want to turn to the next page?</value>
  </data>
  <data name="Invalid_access_level_Please_en" xml:space="preserve">
    <value>Invalid access level. Please enter a valid integer value between 0 and 10000.</value>
  </data>
  <data name="Invalid_input_Please_enter_a_v" xml:space="preserve">
    <value>Invalid input. Please enter a valid number.</value>
  </data>
  <data name="IS_Are_you_sure_you_want_to_re" xml:space="preserve">
    <value>Are you sure you want to remove {0}:{1} from your cart?</value>
  </data>
  <data name="IS_DELETE_FROM_Cart_WHERE_Spar" xml:space="preserve">
    <value>DELETE FROM Cart WHERE SpareID = '{0}' AND UserID = {1};</value>
  </data>
  <data name="IS_Not_enough_stock_for_0_1_On" xml:space="preserve">
    <value>Not enough stock for {0}:{1}
 Only can order {2}
Still placing order?</value>
  </data>
  <data name="IS_Order_placed_successfully_t" xml:space="preserve">
    <value>Order placed successfully, the order serial is {0}</value>
  </data>
  <data name="IS_The_price_of_0_1_has_change" xml:space="preserve">
    <value>The price of {0}:{1} has changed from {2} to {3}
Still placing order?</value>
  </data>
  <data name="IS_Total_Price_0" xml:space="preserve">
    <value>Total Price:
{0}</value>
  </data>
  <data name="IS_Total_Quantity_0" xml:space="preserve">
    <value>Total Quantity:
{0}</value>
  </data>
  <data name="Location" xml:space="preserve">
    <value>Location</value>
  </data>
  <data name="Missging_data" xml:space="preserve">
    <value>Missging data!</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="No_item_in_cart" xml:space="preserve">
    <value>No item in cart</value>
  </data>
  <data name="No_saleArea" xml:space="preserve">
    <value>No saleArea</value>
  </data>
  <data name="No_stock_found" xml:space="preserve">
    <value>No stock found</value>
  </data>
  <data name="only_number" xml:space="preserve">
    <value>only number!</value>
  </data>
  <data name="OrderItem" xml:space="preserve">
    <value>OrderItem</value>
  </data>
  <data name="Phone_number_cannot_exceed_20_" xml:space="preserve">
    <value>Phone number cannot exceed 20 digits.</value>
  </data>
  <data name="Please_enter_a_valid_email_add" xml:space="preserve">
    <value>Please enter a valid email address!</value>
  </data>
  <data name="Please_fill_in_all_the_require" xml:space="preserve">
    <value>Please fill in all the required information!</value>
  </data>
  <data name="Please_provide_complete_data" xml:space="preserve">
    <value>Please provide complete data</value>
  </data>
  <data name="Please_provide_Location" xml:space="preserve">
    <value>Please provide Location!</value>
  </data>
  <data name="Price" xml:space="preserve">
    <value>Price</value>
  </data>
  <data name="Qty" xml:space="preserve">
    <value>Qty</value>
  </data>
  <data name="quantity" xml:space="preserve">
    <value>quantity</value>
  </data>
  <data name="SpareID" xml:space="preserve">
    <value>SpareID</value>
  </data>
  <data name="SpareName" xml:space="preserve">
    <value>SpareName</value>
  </data>
  <data name="SpareType" xml:space="preserve">
    <value>SpareType</value>
  </data>
  <data name="StaffID" xml:space="preserve">
    <value>StaffID</value>
  </data>
  <data name="succeed" xml:space="preserve">
    <value>succeed!</value>
  </data>
  <data name="Success" xml:space="preserve">
    <value>Success</value>
  </data>
  <data name="Successful_add" xml:space="preserve">
    <value>Successful add!</value>
  </data>
  <data name="Successful_ADD_your_added_new_" xml:space="preserve">
    <value>Successful ADD, your added new spare ID is </value>
  </data>
  <data name="Successful_adding" xml:space="preserve">
    <value>Successful adding!</value>
  </data>
  <data name="Successful_reset_password" xml:space="preserve">
    <value>Successful reset password</value>
  </data>
  <data name="SupplierName" xml:space="preserve">
    <value>SupplierName</value>
  </data>
  <data name="System_is_busy_please_try_agai" xml:space="preserve">
    <value>System is busy please try again later</value>
  </data>
  <data name="The_old_password_does_not_matc" xml:space="preserve">
    <value>The old password does not match, please re-enter!</value>
  </data>
  <data name="The_password_entered_twice_is_" xml:space="preserve">
    <value>The password entered twice is different, please re-enter!</value>
  </data>
</root>